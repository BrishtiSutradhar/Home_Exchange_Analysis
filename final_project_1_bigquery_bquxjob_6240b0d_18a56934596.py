# -*- coding: utf-8 -*-
"""Final-Project-1 BigQuery bquxjob_6240b0d_18a56934596

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1bMg_NRyQibnTPuAFNbVwx8Knk44KoU7o
"""

import pandas as pd
import seaborn as sns
from scipy import stats

from google.colab import auth
import pandas as pd
# Will collect your credentials
auth.authenticate_user()

# Query Bigquery
project_id = 'lewagon-final-project-397408'
dataset = 'home_exchange'
table = 'exchange_subscriptions'
query = f'SELECT * FROM {project_id}.{dataset}.{table}'
results = pd.read_gbq(query, project_id = project_id)
results

results.describe()

results[['home_request', 'apartment_request', 'other_home_type_request', 'successful_count']]

people_who_churn = results[results['churn'] == 1]
people_who_not_churn = results[results['churn'] == 0]

churn_apartment = people_who_churn[people_who_churn['apartment_request'] >0]
churn_apartment = churn_apartment[['user_id','churn', 'apartment_request']]


churn_house = people_who_churn[people_who_churn['home_request'] >0]
churn_house = churn_house[['user_id','churn', 'home_request']]

count_churn_apart =churn_apartment.apartment_request.count()
count_churn_apart

count_churn_home = churn_house.home_request.count()
count_churn_home

churned = {'c_c_a': count_churn_apart,
           'c_c_h': count_churn_home}
df = pd.DataFrame(list(churned.items()), columns=['Column_Name', 'Value'])

sns.barplot(df, x ='Column_Name', y ='Value')

not_churn_apartment = people_who_not_churn[people_who_not_churn['apartment_request'] <1]
not_churn_apartment = not_churn_apartment[['user_id','churn', 'apartment_request']]

not_churn_house = people_who_not_churn[people_who_not_churn['home_request']<1]
not_churn_house = not_churn_house[['user_id','churn', 'home_request']]

count_not_churn_apart = not_churn_apartment.apartment_request.count()
count_not_churn_apart

count_not_churn_home = not_churn_house.home_request.count()
count_not_churn_home

not_churned = {'c_n_c_a': count_not_churn_apart,
           'c_n_c_h': count_not_churn_home}
df = pd.DataFrame(list(not_churned.items()), columns=['Column_Name', 'Value'])

sns.barplot(df, x ='Column_Name', y ='Value')

people_who_not_churn = people_who_not_churn[['churn', 'user_id', 'home_request', 'apartment_request']]
people_who_churn = people_who_churn[['churn', 'user_id', 'home_request', 'apartment_request']]
combined_df = pd.concat([people_who_not_churn, people_who_churn])

combined_df = pd.concat([people_who_not_churn, people_who_churn])

contingency_table = pd.crosstab(combined_df['churn'], [combined_df['home_request'], combined_df['apartment_request']])

from scipy.stats import chi2_contingency

chi2, p, _, _ = chi2_contingency(contingency_table)

print(f"Chi-squared statistic: {chi2}")
print(f"P-value: {p}")

"""
My p-value is less than my significance level(0.05), but chart is saying that the type of home is not associated with whether people left or not.So I fail to reject the null hypothesis.There is not a statistically significant relationship between "type_of_home" and "churn." So the type of home is not associated with whether people left or not."""

results[['primary_residence_request','secondary_residence_request','successful_count']]

people_who_churn = results[results['churn'] == 1]
people_who_not_churn = results[results['churn'] == 0]

churn_primary_residence_request = people_who_churn[people_who_churn['primary_residence_request'] >0]
churn_primary_residence_request = churn_primary_residence_request[['user_id','churn', 'primary_residence_request']]


churn_secondary_residence_request = people_who_churn[people_who_churn['secondary_residence_request'] >0]
churn_secondary_residence_request = churn_secondary_residence_request[['user_id','churn', 'secondary_residence_request']]

count_churn_primary_residence=churn_primary_residence_request.primary_residence_request.count()
count_churn_primary_residence

count_churn_secondary_residence =churn_secondary_residence_request.secondary_residence_request.count()
count_churn_secondary_residence

churned = {'c_c_p_r': count_churn_primary_residence,
           'c_c_s_r': count_churn_secondary_residence}
df = pd.DataFrame(list(churned.items()), columns=['Column_Name', 'Value'])

sns.barplot(df, x ='Column_Name', y ='Value')

not_churn_primary_residence_request = people_who_not_churn[people_who_not_churn['primary_residence_request'] <1]
not_churn_primary_residence_request = not_churn_primary_residence_request[['user_id','churn', 'primary_residence_request']]


not_churn_secondary_residence_request = people_who_not_churn[people_who_not_churn['secondary_residence_request'] <1]
not_churn_secondary_residence_request = not_churn_secondary_residence_request[['user_id','churn', 'secondary_residence_request']]

count_not_churn_primary_residence=not_churn_primary_residence_request.primary_residence_request.count()
count_not_churn_primary_residence

count_not_churn_secondary_residence =not_churn_secondary_residence_request.secondary_residence_request.count()
count_not_churn_secondary_residence

not_churned = {'c_n_c_p_r': count_not_churn_primary_residence,
           'c_n_c_s_r': count_churn_secondary_residence}
df = pd.DataFrame(list(churned.items()), columns=['Column_Name', 'Value'])

sns.barplot(df, x ='Column_Name', y ='Value')

people_who_not_churn = people_who_not_churn[['churn', 'user_id', 'primary_residence_request', 'secondary_residence_request']]
people_who_churn = people_who_churn[['churn', 'user_id', 'primary_residence_request', 'secondary_residence_request']]
combined_df = pd.concat([people_who_not_churn, people_who_churn])

combined_df = pd.concat([people_who_not_churn, people_who_churn])

contingency_table = pd.crosstab(combined_df['churn'], [combined_df['primary_residence_request'], combined_df['secondary_residence_request']])

from scipy.stats import chi2_contingency

chi2, p, _, _ = chi2_contingency(contingency_table)

print(f"Chi-squared statistic: {chi2}")
print(f"P-value: {p}")

"""
My p-value is less than my significance level(0.05), but chart is saying that the type of residence is not associated with whether people left or not.So I fail to reject the null hypothesis.There is not a statistically significant relationship between "type_of_residence" and "churn." So the type of residence is not associated with whether people left or not."""

results[['reciprocal','non_reciprocal','successful_count']]

people_who_churn = results[results['churn'] == 1]
people_who_not_churn = results[results['churn'] == 0]

churn_reciprocal = people_who_churn[people_who_churn['reciprocal'] >0]
churn_reciprocal = churn_reciprocal[['user_id','churn', 'reciprocal']]


churn_non_reciprocal = people_who_churn[people_who_churn['non_reciprocal'] >0]
churn_non_reciprocal = churn_non_reciprocal[['user_id','churn', 'non_reciprocal']]

count_churn_reci =churn_reciprocal.reciprocal.count()
count_churn_reci

count_churn_non_reci =churn_non_reciprocal.non_reciprocal.count()
count_churn_non_reci

churned = {'count_churn_reciprocal': count_churn_reci,
           'count_churn_non_reciprocal': count_churn_non_reci}
df = pd.DataFrame(list(churned.items()), columns=['Reciprocal_&_Non_Reciprocal_Churn_difference', 'Churn_Value'])

sns.barplot(df, x ='Reciprocal_&_Non_Reciprocal_Churn_difference', y ='Churn_Value')

not_churn_reciprocal = people_who_not_churn[people_who_not_churn['reciprocal'] <1]
not_churn_reciprocal = not_churn_reciprocal[['user_id','churn', 'reciprocal']]

not_churn_non_reciprocal = people_who_not_churn[people_who_not_churn['non_reciprocal']<1]
not_churn_non_reciprocal = not_churn_non_reciprocal[['user_id','churn', 'non_reciprocal']]

count_not_churn_reci = not_churn_reciprocal.reciprocal.count()
count_not_churn_reci

count_not_churn_non_reci = not_churn_non_reciprocal.non_reciprocal.count()
count_not_churn_non_reci

not_churned = {'count_not_churn_reciprocal': count_not_churn_reci,
           'count_not_churn_non_reciprocal': count_not_churn_non_reci}
df = pd.DataFrame(list(not_churned.items()), columns=['Reciprocal_&_Non_Reciprocal_Not_Churn_difference', 'Not_Churn_Value'])

sns.barplot(df, x ='Reciprocal_&_Non_Reciprocal_Not_Churn_difference', y ='Not_Churn_Value')

people_who_not_churn = people_who_not_churn[['churn', 'user_id', 'reciprocal', 'non_reciprocal']]
people_who_churn = people_who_churn[['churn', 'user_id', 'reciprocal', 'non_reciprocal']]
combined_df = pd.concat([people_who_not_churn, people_who_churn])

combined_df = pd.concat([people_who_not_churn, people_who_churn])

contingency_table = pd.crosstab(combined_df['churn'], [combined_df['reciprocal'], combined_df['non_reciprocal']])

from scipy.stats import chi2_contingency

chi2, p, _, _ = chi2_contingency(contingency_table)

print(f"Chi-squared statistic: {chi2}")
print(f"P-value: {p}")

"""My p-value is less than my significance level(0.05) and If m visualize my chart then my chart is also saying same thing. So I reject the null hypothesis.There is a statistically significant relationship between "type_of_exchange" and "churn." So the type of exchange is associated with whether people left or not."""

